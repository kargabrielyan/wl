import { PrismaClient } from '@prisma/client'

const prisma = new PrismaClient()

async function addMissingData() {
  try {
    console.log('üîß –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ...')

    // –°–æ–∑–¥–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    const settingsCount = await prisma.settings.count()
    if (settingsCount === 0) {
      await prisma.settings.createMany({
        data: [
          {
            key: 'site_name',
            value: 'Pideh Armenia'
          },
          {
            key: 'contact_phone',
            value: '+374 95-044-888'
          },
          {
            key: 'contact_email',
            value: 'info@pideh.am'
          },
          {
            key: 'delivery_free_minimum',
            value: '5000'
          },
          {
            key: 'working_hours',
            value: '10:00-22:00'
          }
        ]
      })
      console.log('‚öôÔ∏è –°–æ–∑–¥–∞–ª–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏')
    }

    // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –∑–∞–∫–∞–∑
    const ordersCount = await prisma.order.count()
    if (ordersCount === 0) {
      const user = await prisma.user.findFirst()
      const products = await prisma.product.findMany({ take: 2 })
      const deliveryType = await prisma.deliveryType.findFirst()

      if (user && products.length >= 2 && deliveryType) {
        const order = await prisma.order.create({
          data: {
            user: {
              connect: { id: user.id }
            },
            status: 'PENDING',
            total: (products[0].salePrice || products[0].price) + (products[1].salePrice || products[1].price),
            address: '‘µ÷Ä÷á’°’∂, ‘±÷Ä’°’¢’Ø’´÷Ä',
            phone: '+374 99-123-456',
            paymentMethod: 'CASH',
            name: '’ì’∏÷Ä’±’°÷Ä’Ø’∏’≤ ÷Ö’£’ø’°’ø’•÷Ä',
            items: {
              create: [
                {
                  productId: products[0].id,
                  quantity: 1,
                  price: products[0].salePrice || products[0].price
                },
                {
                  productId: products[1].id,
                  quantity: 1,
                  price: products[1].salePrice || products[1].price
                }
              ]
            }
          }
        })
        console.log('üìã –°–æ–∑–¥–∞–ª–∏ —Ç–µ—Å—Ç–æ–≤—ã–π –∑–∞–∫–∞–∑')
      }
    }

    // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ
    const wishlistCount = await prisma.wishlist.count()
    if (wishlistCount === 0) {
      const user = await prisma.user.findFirst()
      const products = await prisma.product.findMany({ take: 3 })

      if (user && products.length >= 3) {
        for (const product of products) {
          await prisma.wishlist.create({
            data: {
              userId: user.id,
              productId: product.id
            }
          })
        }
        console.log('‚ù§Ô∏è –°–æ–∑–¥–∞–ª–∏ —Ç–µ—Å—Ç–æ–≤–æ–µ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ')
      }
    }

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    const stats = {
      categories: await prisma.category.count(),
      products: await prisma.product.count(),
      users: await prisma.user.count(),
      orders: await prisma.order.count(),
      orderItems: await prisma.orderItem.count(),
      wishlist: await prisma.wishlist.count(),
      deliveryTypes: await prisma.deliveryType.count(),
      settings: await prisma.settings.count()
    }

    console.log('\nüìä –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:')
    console.log(`–ö–∞—Ç–µ–≥–æ—Ä–∏–∏: ${stats.categories}`)
    console.log(`–ü—Ä–æ–¥—É–∫—Ç—ã: ${stats.products}`)
    console.log(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: ${stats.users}`)
    console.log(`–ó–∞–∫–∞–∑—ã: ${stats.orders}`)
    console.log(`–ü–æ–∑–∏—Ü–∏–∏ –∑–∞–∫–∞–∑–æ–≤: ${stats.orderItems}`)
    console.log(`–ò–∑–±—Ä–∞–Ω–Ω–æ–µ: ${stats.wishlist}`)
    console.log(`–¢–∏–ø—ã –¥–æ—Å—Ç–∞–≤–∫–∏: ${stats.deliveryTypes}`)
    console.log(`–ù–∞—Å—Ç—Ä–æ–π–∫–∏: ${stats.settings}`)

    console.log('\n‚úÖ –í—Å–µ –¥–∞–Ω–Ω—ã–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã! –¢–µ–ø–µ—Ä—å –≤ Prisma Studio –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –¥–∞–Ω–Ω—ã–µ.')

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö:', error)
  } finally {
    await prisma.$disconnect()
  }
}

addMissingData()
