import { PrismaClient } from '@prisma/client'

const prisma = new PrismaClient()

// –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ –æ—Å—Ç–∞–≤–∏—Ç—å
const KEEP_CATEGORIES = [
  '’ï÷Ä’∏÷Ä’∏÷Å’∂’•÷Ä',
  '‘ø’°’∞’∏÷Ç’µ÷Ñ', 
  '’Ä’°’æ’°÷Ñ’°’Æ’∏÷Ç’∂’•÷Ä',
  '’î’∏’≤’•÷Ä',
  '’Ä’µ’∏÷Ç’Ω’•÷Ä',
  '‘µ÷Ä’°’™’∑’ø’°’Ø’°’∂ ‘Ω’°’≤’°’¨’´÷Ñ’∂’•÷Ä',
  '‘±’∂’Ø’∏’≤’∂’°’µ’´’∂ ’ä’°÷Ä’°’£’°’∂’•÷Ä',
  '’Ñ’°’∂’Ø’°’Ø’°’∂ ’ç’•’∂’µ’°’Ø’´ ‘¥’•’Ø’∏÷Ä’∂’•÷Ä',
  '’Ü’•÷Ä÷Ñ’∂’°’Ø’∂’•÷Ä',
  '‘Ω’°’≤’°’¨’´÷Ñ’∂’•÷Ä',
  '’Ä’°’£’∏÷Ç’Ω’ø'
]

async function cleanupCategories() {
  try {
    console.log('üßπ –ù–∞—á–∏–Ω–∞–µ–º –æ—á–∏—Å—Ç–∫—É –∫–∞—Ç–µ–≥–æ—Ä–∏–π...')
    
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    const allCategories = await prisma.category.findMany({
      select: {
        id: true,
        name: true,
        isActive: true
      }
    })

    console.log(`üìä –í—Å–µ–≥–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –≤ –ë–î: ${allCategories.length}`)
    
    // –ù–∞—Ö–æ–¥–∏–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
    const categoriesToDelete = allCategories.filter(cat => 
      !KEEP_CATEGORIES.includes(cat.name)
    )
    
    console.log(`üóëÔ∏è –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è: ${categoriesToDelete.length}`)
    categoriesToDelete.forEach(cat => {
      console.log(`   - ${cat.name} (ID: ${cat.id})`)
    })

    // –ù–∞—Ö–æ–¥–∏–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ –æ—Å—Ç–∞–≤–∏—Ç—å
    const categoriesToKeep = allCategories.filter(cat => 
      KEEP_CATEGORIES.includes(cat.name)
    )
    
    console.log(`‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –∫–æ—Ç–æ—Ä—ã–µ –æ—Å—Ç–∞—é—Ç—Å—è: ${categoriesToKeep.length}`)
    categoriesToKeep.forEach(cat => {
      console.log(`   - ${cat.name} (ID: ${cat.id})`)
    })

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∫–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–∑ —Å–ø–∏—Å–∫–∞ KEEP_CATEGORIES –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –≤ –ë–î
    const missingCategories = KEEP_CATEGORIES.filter(name => 
      !allCategories.some(cat => cat.name === name)
    )
    
    if (missingCategories.length > 0) {
      console.log(`‚ûï –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å: ${missingCategories.length}`)
      missingCategories.forEach(name => {
        console.log(`   - ${name}`)
      })
    }

    // –£–¥–∞–ª—è–µ–º –Ω–µ–Ω—É–∂–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    if (categoriesToDelete.length > 0) {
      console.log('\nüóëÔ∏è –£–¥–∞–ª—è–µ–º –Ω–µ–Ω—É–∂–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏...')
      
      const deleteResult = await prisma.category.deleteMany({
        where: {
          id: {
            in: categoriesToDelete.map(cat => cat.id)
          }
        }
      })
      
      console.log(`‚úÖ –£–¥–∞–ª–µ–Ω–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π: ${deleteResult.count}`)
    }

    // –°–æ–∑–¥–∞–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    if (missingCategories.length > 0) {
      console.log('\n‚ûï –°–æ–∑–¥–∞–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏...')
      
      for (let i = 0; i < missingCategories.length; i++) {
        const categoryName = missingCategories[i]
        const sortOrder = i + 1
        
        await prisma.category.create({
          data: {
            name: categoryName,
            description: `‘±÷Ä’ø’°’§÷Ä’°’∂÷Ñ ${categoryName.toLowerCase()}`,
            sortOrder: sortOrder,
            isActive: true,
            showInMainPage: true
          }
        })
        
        console.log(`   ‚úÖ –°–æ–∑–¥–∞–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è: ${categoryName}`)
      }
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ—Ä—è–¥–æ–∫ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    console.log('\nüîÑ –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ—Ä—è–¥–æ–∫ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏...')
    
    for (let i = 0; i < KEEP_CATEGORIES.length; i++) {
      const categoryName = KEEP_CATEGORIES[i]
      const sortOrder = i + 1
      
      await prisma.category.updateMany({
        where: {
          name: categoryName
        },
        data: {
          sortOrder: sortOrder,
          isActive: true,
          showInMainPage: true
        }
      })
      
      console.log(`   ‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è: ${categoryName} (–ø–æ—Ä—è–¥–æ–∫: ${sortOrder})`)
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    console.log('\nüìã –ò—Ç–æ–≥–æ–≤—ã–π —Å–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π:')
    const finalCategories = await prisma.category.findMany({
      orderBy: { sortOrder: 'asc' },
      select: {
        id: true,
        name: true,
        sortOrder: true,
        isActive: true,
        showInMainPage: true
      }
    })

    finalCategories.forEach((cat, index) => {
      console.log(`${index + 1}. ${cat.name} (–ø–æ—Ä—è–¥–æ–∫: ${cat.sortOrder}, –∞–∫—Ç–∏–≤–Ω–∞: ${cat.isActive ? '–î–∞' : '–ù–µ—Ç'})`)
    })

    console.log(`\n‚úÖ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –û—Å—Ç–∞–ª–æ—Å—å –∫–∞—Ç–µ–≥–æ—Ä–∏–π: ${finalCategories.length}`)

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π:', error)
  } finally {
    await prisma.$disconnect()
  }
}

cleanupCategories()
