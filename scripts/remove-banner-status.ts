import { PrismaClient } from '@prisma/client'

const prisma = new PrismaClient()

async function removeBannerStatus() {
  try {
    console.log('üîÑ –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ç—É—Å BANNER —Å–æ –≤—Å–µ—Ö —Ç–æ–≤–∞—Ä–æ–≤...')
    
    // –°–Ω–∞—á–∞–ª–∞ –ø–æ—Å–º–æ—Ç—Ä–∏–º, —Å–∫–æ–ª—å–∫–æ —Ç–æ–≤–∞—Ä–æ–≤ –∏–º–µ—é—Ç —Å—Ç–∞—Ç—É—Å BANNER
    const bannerProductsCount = await prisma.product.count({
      where: {
        status: 'BANNER'
      }
    })
    
    console.log(`üìä –ù–∞–π–¥–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º BANNER: ${bannerProductsCount}`)
    
    if (bannerProductsCount === 0) {
      console.log('‚úÖ –ù–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º BANNER')
      return
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Å–µ —Ç–æ–≤–∞—Ä—ã —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º BANNER –Ω–∞ CLASSIC
    const updateResult = await prisma.product.updateMany({
      where: {
        status: 'BANNER'
      },
      data: {
        status: 'CLASSIC'
      }
    })
    
    console.log(`‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: ${updateResult.count}`)
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    const remainingBannerProducts = await prisma.product.count({
      where: {
        status: 'BANNER'
      }
    })
    
    console.log(`üìä –û—Å—Ç–∞–ª–æ—Å—å —Ç–æ–≤–∞—Ä–æ–≤ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º BANNER: ${remainingBannerProducts}`)
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º
    const productsByStatus = await prisma.product.groupBy({
      by: ['status'],
      _count: {
        id: true
      }
    })
    
    console.log('\nüìã –û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º:')
    productsByStatus.forEach(group => {
      console.log(`  ${group.status}: ${group._count.id} —Ç–æ–≤–∞—Ä–æ–≤`)
    })
    
    console.log('\nüéâ –°—Ç–∞—Ç—É—Å BANNER —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω —Å–æ –≤—Å–µ—Ö —Ç–æ–≤–∞—Ä–æ–≤!')
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ BANNER:', error)
  } finally {
    await prisma.$disconnect()
  }
}

removeBannerStatus()
