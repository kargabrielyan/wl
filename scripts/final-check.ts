import { PrismaClient } from '@prisma/client'

const prisma = new PrismaClient()

async function finalCheck() {
  try {
    console.log('üîç –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...')
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    const categories = await prisma.category.count()
    console.log(`üìÅ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏: ${categories}`)
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ–¥—É–∫—Ç—ã
    const products = await prisma.product.count()
    console.log(`üì¶ –ü—Ä–æ–¥—É–∫—Ç—ã: ${products}`)
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ–¥—É–∫—Ç—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
    const productsByCategory = await prisma.product.groupBy({
      by: ['categoryId'],
      _count: {
        id: true
      },
      orderBy: {
        _count: {
          id: 'desc'
        }
      }
    })
    
    console.log('\nüìä –ü—Ä–æ–¥—É–∫—Ç—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:')
    for (const group of productsByCategory) {
      const category = await prisma.category.findUnique({
        where: { id: group.categoryId }
      })
      console.log(`  ${category?.name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è'}: ${group._count.id} –ø—Ä–æ–¥—É–∫—Ç–æ–≤`)
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ–¥—É–∫—Ç—ã –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º
    const productsByStatus = await prisma.product.groupBy({
      by: ['status'],
      _count: {
        id: true
      }
    })
    
    console.log('\nüìã –ü—Ä–æ–¥—É–∫—Ç—ã –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º:')
    productsByStatus.forEach(group => {
      console.log(`  ${group.status}: ${group._count.id} –ø—Ä–æ–¥—É–∫—Ç–æ–≤`)
    })
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ–¥—É–∫—Ç—ã —Å–æ —Å–∫–∏–¥–∫–∞–º–∏
    const productsWithSale = await prisma.product.count({
      where: {
        salePrice: {
          not: null
        }
      }
    })
    
    console.log(`\nüí∞ –ü—Ä–æ–¥—É–∫—Ç—ã —Å–æ —Å–∫–∏–¥–∫–∞–º–∏: ${productsWithSale}`)
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã –ø—Ä–æ–¥—É–∫—Ç–æ–≤
    const sampleProducts = await prisma.product.findMany({
      take: 5,
      include: {
        category: true
      }
    })
    
    console.log('\nüîç –ü—Ä–∏–º–µ—Ä—ã –ø—Ä–æ–¥—É–∫—Ç–æ–≤:')
    sampleProducts.forEach((product, index) => {
      console.log(`${index + 1}. ${product.name}`)
      console.log(`   –ö–∞—Ç–µ–≥–æ—Ä–∏—è: ${product.category?.name}`)
      console.log(`   –¶–µ–Ω–∞: ${product.price} ÷è${product.salePrice ? ` (—Å–æ —Å–∫–∏–¥–∫–æ–π: ${product.salePrice} ÷è)` : ''}`)
      console.log(`   –°—Ç–∞—Ç—É—Å: ${product.status}`)
      console.log(`   –í –Ω–∞–ª–∏—á–∏–∏: ${product.stock} —à—Ç.`)
      console.log('')
    })
    
    console.log('‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ!')
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ:', error)
  } finally {
    await prisma.$disconnect()
  }
}

finalCheck()
