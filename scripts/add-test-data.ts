import { PrismaClient } from '@prisma/client'

const prisma = new PrismaClient()

async function addTestData() {
  try {
    console.log('üå± –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ...')

    // –°–æ–∑–¥–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    const category1 = await prisma.category.upsert({
      where: { name: '‘Ω’°’≤’°’¨’´÷Ñ’∂’•÷Ä' },
      update: {},
      create: {
        name: '‘Ω’°’≤’°’¨’´÷Ñ’∂’•÷Ä',
        description: '’Ñ’°’∂’Ø’°’Ø’°’∂ ’≠’°’≤’°’¨’´÷Ñ’∂’•÷Ä',
        isActive: true,
        showInMainPage: true,
        sortOrder: 1
      }
    })

    const category2 = await prisma.category.upsert({
      where: { name: '’Ä’°’£’∏÷Ç’Ω’ø' },
      update: {},
      create: {
        name: '’Ä’°’£’∏÷Ç’Ω’ø',
        description: '’Ñ’°’∂’Ø’°’Ø’°’∂ ’∞’°’£’∏÷Ç’Ω’ø',
        isActive: true,
        showInMainPage: true,
        sortOrder: 2
      }
    })

    console.log('‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å–æ–∑–¥–∞–Ω—ã')

    // –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–¥—É–∫—Ç—ã
    const product1 = await prisma.product.create({
      data: {
        name: '‘Ω’°’≤’°’¨’´÷Ñ ’¥’•÷Ñ’•’∂’°',
        description: '‘ø’°÷Ä’¥’´÷Ä ’≠’°’≤’°’¨’´÷Ñ ’¥’•÷Ñ’•’∂’° ’•÷Ä’•’≠’°’∂’•÷Ä’´ ’∞’°’¥’°÷Ä',
        price: 5000,
        image: '/images/products/car.jpg',
        status: 'NEW',
        categoryId: category1.id,
        ingredients: '’ä’¨’°’Ω’ø’´’Ø, ’¥’•’ø’°’≤',
        isAvailable: true
      }
    })

    const product2 = await prisma.product.create({
      data: {
        name: '‘µ÷Ä’•’≠’°’∂’•÷Ä’´ ’∑’°’∫’´’Ø',
        description: '‘ø’°’∫’∏÷Ç’µ’ø ’∑’°’∫’´’Ø ’•÷Ä’•’≠’°’∂’•÷Ä’´ ’∞’°’¥’°÷Ä',
        price: 3000,
        image: '/images/products/shirt.jpg',
        status: 'CLASSIC',
        categoryId: category2.id,
        ingredients: '100% ’¢’°’¥’¢’°’Ø',
        isAvailable: true
      }
    })

    console.log('‚úÖ –ü—Ä–æ–¥—É–∫—Ç—ã —Å–æ–∑–¥–∞–Ω—ã')

    // –°–æ–∑–¥–∞–µ–º —Ç–∏–ø—ã –¥–æ—Å—Ç–∞–≤–∫–∏
    const deliveryType1 = await prisma.deliveryType.upsert({
      where: { name: '‘±÷Ä’°’£ ’°’º’°÷Ñ’∏÷Ç’¥' },
      update: {},
      create: {
        name: '‘±÷Ä’°’£ ’°’º’°÷Ñ’∏÷Ç’¥',
        description: '30 ÷Ä’∏’∫’•’∏÷Ç’¥',
        deliveryTime: '30 ÷Ä’∏’∫’•',
        price: 0,
        isActive: true
      }
    })

    const deliveryType2 = await prisma.deliveryType.upsert({
      where: { name: '’ç’ø’°’∂’§’°÷Ä’ø ’°’º’°÷Ñ’∏÷Ç’¥' },
      update: {},
      create: {
        name: '’ç’ø’°’∂’§’°÷Ä’ø ’°’º’°÷Ñ’∏÷Ç’¥',
        description: '1-2 ’™’°’¥’∏÷Ç’¥',
        deliveryTime: '1-2 ’™’°’¥',
        price: 500,
        isActive: true
      }
    })

    console.log('‚úÖ –¢–∏–ø—ã –¥–æ—Å—Ç–∞–≤–∫–∏ —Å–æ–∑–¥–∞–Ω—ã')

    // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const testUser = await prisma.user.upsert({
      where: { email: 'test@example.com' },
      update: {},
      create: {
        email: 'test@example.com',
        name: '’ì’∏÷Ä’±’°÷Ä’Ø’∏’≤ ÷Ö’£’ø’°’ø’•÷Ä',
        phone: '+374 99-123-456',
        address: '‘µ÷Ä÷á’°’∂, ‘±÷Ä’°’¢’Ø’´÷Ä',
        password: 'test123',
        role: 'USER'
      }
    })

    console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω')

    // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –∑–∞–∫–∞–∑
    const testOrder = await prisma.order.create({
      data: {
        user: {
          connect: { id: testUser.id }
        },
        total: 8000,
        status: 'PENDING',
        name: testUser.name,
        phone: testUser.phone,
        address: testUser.address,
        paymentMethod: 'CASH',
        items: {
          create: [
            {
              productId: product1.id,
              quantity: 1,
              price: product1.price
            },
            {
              productId: product2.id,
              quantity: 1,
              price: product2.price
            }
          ]
        }
      }
    })

    console.log('‚úÖ –ó–∞–∫–∞–∑ —Å–æ–∑–¥–∞–Ω')

    console.log('üéâ –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã!')
    console.log(`üì¶ –ü—Ä–æ–¥—É–∫—Ç–æ–≤: 2`)
    console.log(`üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏–π: 2`)
    console.log(`üöö –¢–∏–ø–æ–≤ –¥–æ—Å—Ç–∞–≤–∫–∏: 2`)
    console.log(`üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: 1`)
    console.log(`üõí –ó–∞–∫–∞–∑–æ–≤: 1`)

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö:', error)
  } finally {
    await prisma.$disconnect()
  }
}

addTestData()
