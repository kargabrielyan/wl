generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String    @id @default(cuid())
  email     String    @unique
  name      String?
  phone     String?
  address   String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
  password  String
  role      UserRole  @default(USER)
  orders    Order[]
  wishlist  Wishlist[]

  @@map("users")
}

model Category {
  id          String    @id @default(cuid())
  name        String    @unique
  description String?
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  products    Product[]

  @@map("categories")
}

model Product {
  id          String        @id @default(cuid())
  name        String
  description String
  price       Float
  salePrice   Float?        // Цена со скидкой (опционально)
  image       String
  categoryId  String
  ingredients String
  isAvailable Boolean       @default(true)
  stock       Int           @default(0)  // Количество в наличии
  status      ProductStatus @default(REGULAR)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  orderItems  OrderItem[]
  wishlist    Wishlist[]
  category    Category      @relation(fields: [categoryId], references: [id])

  @@map("products")
}

model Order {
  id            String      @id @default(cuid())
  userId        String?
  status        OrderStatus @default(PENDING)
  total         Float
  address       String
  phone         String
  notes         String?
  paymentMethod String
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  deliveryTime  String?
  name          String      @default("Unknown Customer")
  items         OrderItem[]
  user          User?       @relation(fields: [userId], references: [id])

  @@map("orders")
}

model OrderItem {
  id        String  @id @default(cuid())
  orderId   String
  productId String
  quantity  Int
  price     Float
  product   Product @relation(fields: [productId], references: [id])
  order     Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)

  @@map("order_items")
}

model Wishlist {
  id        String   @id @default(cuid())
  userId    String
  productId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([userId, productId])
  @@map("wishlist")
}


model DeliveryType {
  id          String   @id @default(cuid())
  name        String   @unique
  deliveryTime String
  description String
  price       Float
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("delivery_types")
}

model Settings {
  id        String   @id @default(cuid())
  key       String   @unique
  value     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("settings")
}

enum UserRole {
  USER
  ADMIN
}

enum OrderStatus {
  PENDING
  CONFIRMED
  PREPARING
  READY
  DELIVERED
  CANCELLED
}

enum ProductStatus {
  REGULAR
  HIT
  NEW
  CLASSIC
  BANNER
}
